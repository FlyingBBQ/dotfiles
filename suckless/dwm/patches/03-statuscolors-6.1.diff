--- tmpp/dwm.c	2018-07-19 18:36:54.855000000 +0200
+++ dwm.c	2018-08-23 20:42:32.388000000 +0200
@@ -59,7 +59,7 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeHigh, SchemeInv, SchemeSeIn}; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -703,9 +703,9 @@
 
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		sw = TEXTW(stext);
-		drw_text(drw, m->ww - sw - (2 * xbar), 0, sw, bh, lrpad / 2, stext, 0);
+		drw_setscheme(drw, scheme[SchemeInv]);
+		sw = drw_get_width(drw, LENGTH(colors), stext);
+		drw_colored_text(drw, scheme, LENGTH(colors), m->ww - sw - (2 * xbar), 0, sw, bh, stext);
 	}
 
 	for (c = m->clients; c; c = c->next) {
@@ -716,7 +716,7 @@
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
 		w = TEXTW(tags[i]);
-		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
+		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeHigh : SchemeNorm]);
 		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
 		if (occ & 1 << i)
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
@@ -725,7 +725,7 @@
 		x += w;
 	}
 	w = blw = TEXTW(m->ltsymbol);
-	drw_setscheme(drw, scheme[SchemeNorm]);
+	drw_setscheme(drw, scheme[SchemeInv]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
 	if ((w = m->ww - sw - x) > bh) {
@@ -2139,6 +2139,7 @@
 	if (!(dpy = XOpenDisplay(NULL)))
 		die("dwm: cannot open display");
 	checkotherwm();
+
 	setup();
 #ifdef __OpenBSD__
 	if (pledge("stdio rpath proc exec", NULL) == -1)
--- tmpp/drw.h	2018-07-21 00:05:52.161000000 +0200
+++ drw.h	2018-08-23 20:23:05.666000000 +0200
@@ -50,6 +50,8 @@
 void drw_setscheme(Drw *drw, Clr *scm);
 
 /* Drawing functions */
+int drw_get_width(Drw *, int, const char *);
+void drw_colored_text(Drw *, Clr **, int, int, int, unsigned int, unsigned int, char *);
 void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert);
 int drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char *text, int invert);
 
--- tmpp/drw.c	2018-07-21 00:05:52.153000000 +0200
+++ drw.c	2018-08-23 20:46:14.434000000 +0200
@@ -222,6 +222,61 @@
 		drw->scheme = scm;
 }
 
+int
+drw_get_width(Drw *drw, int numcolors, const char *text)
+{
+    int i;
+    Fnt *curfont = drw->fonts;
+    int w = drw_fontset_getwidth(drw, text);
+
+    for (i = 0; i < strlen(text); i++) {
+        if (text[i] == '#') {
+            /* color code, -length of 2 characters */
+            w -= (2 * curfont->xfont->max_advance_width);
+            /* skip 2 characters */
+            i += 1;
+        }
+        /* no checks for first or last character */
+    }
+    return w;
+}
+
+void
+drw_colored_text(Drw *drw, Clr **scheme, int numcolors, int x, int y, unsigned int w, unsigned int h, char *text)
+{
+	if (!drw || !drw->fonts || !drw->scheme)
+		return;
+
+	char *buf = text, *ptr = text, c = 1;
+    char outbuf[32] = { 0 }; /* this buffer is written with drw_txt() */
+	int i;
+
+    for (i = 0; *ptr; i++, ptr++) {
+        if (*ptr == '\0' || *ptr == '\n')
+            break;
+
+        /* '#' is the separator */
+        if (ptr[0] == '#') {
+            c = ptr[1] - '0'; /* get the color */
+
+            strncpy(outbuf, buf, i);
+            w = drw_fontset_getwidth(drw, outbuf);
+			x = drw_text(drw, x, y, w, h, 0, outbuf, 0);
+
+            /* color code is 2 characters so move 2 */
+            ptr += 2;
+            buf = ptr;
+            i = 0; /* reset length of buffer */
+
+		    drw_setscheme(drw, scheme[c-1]);
+        }
+        memset(outbuf, 0, sizeof(outbuf));
+    }
+    /* draw remaining part of buffer */
+    w = drw_fontset_getwidth(drw, buf);
+	drw_text(drw, x, y, w, h, 0, buf, 0);
+}
+
 void
 drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)
 {
