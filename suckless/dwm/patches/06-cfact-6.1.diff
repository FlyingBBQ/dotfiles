--- tmpp/dwm.c	2019-08-24 16:12:03.904091992 +0200
+++ dwm.c	2019-08-24 16:22:59.967405480 +0200
@@ -88,6 +88,7 @@
 struct Client {
 	char name[256];
 	float mina, maxa;
+    float cfact;
 	int x, y, w, h;
 	int oldx, oldy, oldw, oldh;
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
@@ -201,6 +202,7 @@
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
 static void setlayout(const Arg *arg);
+static void setcfact(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
@@ -1046,6 +1048,7 @@
 	c->w = c->oldw = wa->width;
 	c->h = c->oldh = wa->height;
 	c->oldbw = wa->border_width;
+    c->cfact = 1.0;
 
 	updatetitle(c);
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
@@ -1528,6 +1531,25 @@
 		drawbar(selmon);
 }
 
+void 
+setcfact(const Arg *arg)
+{
+    float f;
+    Client *c;
+
+    c = selmon->sel;
+
+    if(!arg || !c || !selmon->lt[selmon->sellt]->arrange)
+        return;
+    f = arg->f + c->cfact;
+    if(arg->f == 0.0)
+        f = 1.0;
+    else if(f < 0.25 || f > 4.0)
+        return;
+    c->cfact = f;
+    arrange(selmon);
+}
+
 /* arg > 1.0 will set mfact absolutely */
 void
 setmfact(const Arg *arg)
@@ -1691,9 +1713,15 @@
 tile(Monitor *m)
 {
 	unsigned int i, n, h, mw, my, ty, ns;
+    float mfacts = 0, sfacts = 0;
 	Client *c;
 
-	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++) {
+		if (n < m->nmaster)
+			mfacts += c->cfact;
+		else
+			sfacts += c->cfact;
+	}
 	if (n == 0)
 		return;
 
@@ -1706,13 +1734,17 @@
     }
 	for(i = 0, my = ty = gappx, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
 		if (i < m->nmaster) {
-			h = (m->wh - my) / (MIN(n, m->nmaster) - i) - gappx;
+			//h = (m->wh - my) / (MIN(n, m->nmaster) - i) - gappx;
+			h = (m->wh - my) * (c->cfact / mfacts) - gappx;
 			resize(c, m->wx + gappx, m->wy + my, mw - (2*c->bw) - gappx*(5-ns)/2, h - (2*c->bw), False);
 			my += HEIGHT(c) + gappx;
+            mfacts -= c->cfact;
 		} else {
-			h = (m->wh - ty) / (n - i) - gappx;
+			//h = (m->wh - ty) / (n - i) - gappx;
+			h = (m->wh - ty) * (c->cfact / sfacts) - gappx;
 			resize(c, m->wx + mw + gappx/ns, m->wy + ty, m->ww - mw - (2*c->bw) - gappx*(5-ns)/2, h - (2*c->bw), False);
 			ty += HEIGHT(c) + gappx;
+            sfacts -= c->cfact;
 		}
 }
 
